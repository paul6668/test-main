https://files.pythonhosted.org/packages/0c/94/e4181a1f6286f545507528c78016e00065ea913276888db2262507693ce5/PyMySQL-1.1.1-py3-none-any.whl




docker run -it --rm -v ./data_file:/home/app/data_dir --network host quay.io/metasync/rta_benchmark /bin/bash




echo "Old tags have been deleted, keeping only the last 10."


jq: error (at <stdin>:1): object ({"name":"1....) and string ("rel") cannot have their containment checked

tags_with_dates=$(echo "$tags_response" | jq -r '.tags[] | select(.name != "latest" and (.name | test("rel") | not)) | "\(.name) \(.last_modified)"')


SELECT table_schema AS "Database",
       ROUND(SUM(data_length + index_length) / 1024 / 1024, 2) AS "Size (MB)"
FROM information_schema.TABLES
GROUP BY table_schema;

+--------------------+-----------+
| Database           | Size (MB) |
+--------------------+-----------+
| _statistics_       |      NULL |
| tpcds              |      NULL |
| sys                |      NULL |
| ssb                |      NULL |
| information_schema |      NULL |
| test_db01          |      NULL |
+--------------------+-----------+
6 rows in set (0.01 sec)
SELECT table_schema AS "Database",
       table_name AS "Table",
       ROUND((data_length + index_length) / 1024 / 1024, 2) AS "Size (MB)"
FROM information_schema.TABLES
ORDER BY table_schema, table_name;


keytool -importkeystore \
        -srckeystore yourfile.pfx \
        -srcstoretype pkcs12 \
        -srcstorepass <password> \
        -srcalias <alias> \
        -srckeypass <keypassword> \
        -destkeystore yourkeystore.jks \
        -deststoretype JKS \
        -deststorepass <newpassword> \
        -destkeypass <newkeypassword>



SSL handshake failed: error:1416F086:SSL routines:tls_process_server_certificate:certificate verify failed: broker certificate could not be verified, verify that ssl.ca.location is correctly configured or root CA certificates are installed (install ca-certificates package) (after 10ms in state SSL_HANDSHAKE)


warning envoy config gRPC config for type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.Secret rejected: Failed to load private key from <inline>, Cause: error:2807106B:UI routines:UI_process:processing error



If the user's attribute as the member of a group is different from the user's DN, you must specify this parameter. For example, if a user's DN is uid=bob,ou=people,o=starrocks,dc=com, but its attribute as a group member is memberUid=bob,ou=people,o=starrocks,dc=com, you need to specify ldap_user_search_attr as uid and ldap_user_group_match_attr as memberUid. If this parameter is not specified, the value you specified in ldap_user_search_attr is used. You can also specify a regular expression to match the members in the group. The regular expression must be prefixed by regex:. Suppose a group has a member CN=Poornima K Hebbar (phebbar),OU=User Policy 0,OU=All Users,DC=SEA,DC=CORP,DC=EXPECN,DC=com. If you specify this property as regex:CN=.*\\(([^)]+)\\), it will match the member phebbar.


^\s*([A-Za-z]+)\s*,\s*([A-Za-z]+)\s*$


^[^\\,]+\\\,\s[^,]+$
authenticationPlugins=com.mysql.jdbc.authentication.MysqlClearPasswordPlugin&amp;defaultAuthenticationPlugin=com.mysql.jdbc.authentication.MysqlClearPasswordPlugin&amp;disabledAuthenticationPlugins=com.mysql.jdbc.authentication.MysqlNativePasswordPlugin&amp;enabledTLSProtocols=TLSv1,TLSv1.1,TLSv1.2&amp;rewriteBatchedStatements=true&amp;useSSL=true



output.elasticsearch:
  hosts: ["https://localhost:9200"]
  ssl:
    enabled: true
    supported_protocols: [TLSv1.2, TLSv1.3] # Only allow strong protocols
    cipher_suites: [
      "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
      "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
      "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
      "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
    ]
    renegotiation: never  # Disable insecure renegotiation



      sum(
        kube_pod_resource_request{resource="cpu"}
        *
        on(node) group_left(role) (
          max by (node) (kube_node_role{role=~"worker"})
        )
      )



avg_over_time(
  sum by (namespace) (
    rate(container_cpu_usage_seconds_total{container!="POD", container!="" , node_role="worker"}[1m])
  )
  [1w:]
)


max_over_time(
  sum by (namespace) (
    rate(container_cpu_usage_seconds_total{container!="POD", container!="" , node_role="worker"}[1m])
  )
  [1w:]
)
